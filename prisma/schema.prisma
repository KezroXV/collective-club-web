// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Mod√®les NextAuth standards
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  shopId            String  // ‚úÖ OBLIGATOIRE pour multi-tenant

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  shop Shop @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId, shopId])
  @@index([shopId]) // Index pour performance multi-tenant
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  shopId       String   // ‚úÖ OBLIGATOIRE pour multi-tenant
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  shop         Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// üè™ MOD√àLE SHOP POUR MULTI-TENANT
model Shop {
  id          String   @id @default(cuid())
  shopDomain  String   @unique // boutique-cosmetic.myshopify.com  
  shopName    String   // "Cosmetic Paradise"
  ownerId     String   // ID du propri√©taire Shopify
  settings    Json?    // Personnalisation (couleurs, etc.)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  users       User[]   // ‚úÖ AJOUTER relation avec les utilisateurs
  accounts    Account[] // ‚úÖ AJOUTER relation avec les comptes NextAuth
  sessions    Session[] // ‚úÖ AJOUTER relation avec les sessions NextAuth
  posts       Post[]
  categories  Category[]
  badges      Badge[]
  polls       Poll[]
  customizationSettings CustomizationSettings[]
  follows     Follow[]
  userPoints  UserPoints[]
  pointTransactions PointTransaction[]
  userBadges  UserBadge[]
  roles       Role[]
  userOnboarding UserOnboarding[]

  @@map("shops")
}

model User {
  id            String   @id @default(cuid())
  email         String   // ‚úÖ SUPPRIMER @unique - unicit√© seulement par shop
  name          String?
  image         String?  // Avatar NextAuth
  emailVerified DateTime? // Requis NextAuth
  role          String   @default("MEMBER") // R√¥le par boutique (dynamique)
  isShopOwner   Boolean  @default(false) // Marqueur propri√©taire boutique
  shopId        String   // ‚úÖ OBLIGATOIRE - ID de la boutique
  shopDomain    String?  // Domain de la boutique pour r√©f√©rence
  isBanned      Boolean  @default(false)
  bannedAt      DateTime?
  bannedBy      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations NextAuth
  accounts Account[]
  sessions Session[]

  // Relations forum (contextuelles par shopId via requ√™tes)
  posts     Post[]
  comments  Comment[]
  reactions Reaction[]
  PollVote  PollVote[]
  customizationSettings CustomizationSettings[]
  
  // Relations sociales
  following Follow[] @relation("UserFollows")
  followers Follow[] @relation("UserFollowed")
  userPoints UserPoints[]
  pointTransactions PointTransaction[]
  userBadges UserBadge[]
  onboarding UserOnboarding[]

  // Relations avec Shop et Role
  shop Shop @relation(fields: [shopId], references: [id], onDelete: Cascade)
  roleInfo Role? @relation(fields: [role, shopId], references: [name, shopId])

  @@unique([shopId, email], name: "shopId_email") // ‚úÖ SEULE contrainte d'unicit√©
  @@map("users")
}
model Category {
  id          String @id @default(cuid())
  name        String 
  color       String // Ex: "bg-orange-500"
  description String?
  isActive    Boolean @default(true)
  order       Int     @default(0)
  shopId      String  // ‚úÖ OBLIGATOIRE pour multi-tenant
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  shop        Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  posts       Post[]

  @@unique([shopId, name]) // Nom unique par shop
  @@map("categories")
}

model Post {
  id        String     @id @default(cuid())
  title     String
  content   String
  slug      String?    // üîç URL-friendly version du titre pour SEO
  imageUrl  String?
  isPinned  Boolean    @default(false)
  pinnedAt  DateTime?  // üìå Date d'√©pinglage (max 3 posts √©pingl√©s par boutique)
  status    PostStatus @default(PUBLISHED)
  shopId    String     // ‚úÖ OBLIGATOIRE pour multi-tenant
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  
  // Relations
  shop       Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)
  author     User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId   String
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?   

  comments  Comment[]
  reactions Reaction[]
  poll      Poll?

  @@unique([shopId, slug]) // Slug unique par shop pour SEO
  @@map("posts")
}

model Poll {
  id       String @id @default(cuid())
  question String
  shopId   String  // ‚úÖ OBLIGATOIRE pour multi-tenant
  
  // Relations
  shop     Shop    @relation(fields: [shopId], references: [id], onDelete: Cascade)
  post     Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   String  @unique
  
  options PollOption[]
  votes   PollVote[]
  
  createdAt DateTime @default(now())
  
  @@map("polls")
}

model PollOption {
  id     String @id @default(cuid())
  text   String
  order  Int    // 0, 1, 2, 3 (pour l'ordre)
  shopId String // ‚úÖ OBLIGATOIRE pour multi-tenant
  
  // Relations
  poll   Poll @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId String
  
  votes PollVote[]
  
  @@map("poll_options")
}

model PollVote {
  id     String @id @default(cuid())
  shopId String // ‚úÖ OBLIGATOIRE pour multi-tenant
  
  // Relations
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  poll     Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId   String
  option   PollOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  optionId String
  
  createdAt DateTime @default(now())
  
  @@unique([userId, pollId]) // Un seul vote par user par sondage
  @@map("poll_votes")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  shopId    String   // ‚úÖ OBLIGATOIRE pour multi-tenant
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  reactions Reaction[]

  // Commentaires imbriqu√©s (r√©ponses)
  parentId  String?  // ID du commentaire parent (null si commentaire principal)
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("CommentReplies")

  @@map("comments")
}

model Reaction {
  id        String       @id @default(cuid())
  type      ReactionType
  shopId    String       // ‚úÖ OBLIGATOIRE pour multi-tenant
  createdAt DateTime     @default(now())

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String?
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@unique([userId, commentId])
  @@map("reactions")
}

// Mod√®le pour g√©rer les r√¥les dynamiques par boutique
model Role {
  id          String @id @default(cuid())
  name        String // ADMIN, MODERATOR, MEMBER, ou r√¥les personnalis√©s
  displayName String // Nom affich√© "Administrateur", "Super Mod√©rateur"
  color       String @default("#3B82F6") // Couleur d'affichage
  permissions Json   // Permissions JSON ["MANAGE_POSTS", "DELETE_COMMENTS", etc.]
  isDefault   Boolean @default(false) // true pour ADMIN, MODERATOR, MEMBER
  shopId      String // ‚úÖ OBLIGATOIRE pour multi-tenant
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  shop        Shop @relation(fields: [shopId], references: [id], onDelete: Cascade)
  users       User[] // Utilisateurs qui ont ce r√¥le

  @@unique([shopId, name]) // Nom unique par shop
  @@map("roles")
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ReactionType {
  LIKE
  LOVE
  LAUGH
  WOW
  APPLAUSE
}

model CustomizationSettings {
  id           String @id @default(cuid())
  userId       String
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  shopId       String  // ‚úÖ OBLIGATOIRE pour multi-tenant
  shop         Shop    @relation(fields: [shopId], references: [id], onDelete: Cascade)
  
  // Couleurs
  colorPosts    String @default("#3B82F6")
  colorBorders  String @default("#E5E7EB")
  colorBg       String @default("#F9FAFB")
  colorText     String @default("#111827")
  
  // Police
  selectedFont  String @default("Inter")
  
  // Image de couverture
  coverImageUrl String?
  
  // Image de banni√®re
  bannerImageUrl String @default("/Banni√®re.svg")

  // Image de logo
  logoImageUrl String?

  // Badges personnalis√©s (JSON)
  customBadges  Json?
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@unique([userId, shopId], name: "userId_shopId") // Param√®tres uniques par user par shop
  @@map("customization_settings")
}

model Badge {
  id             String @id @default(cuid())
  name           String
  imageUrl       String
  requiredPoints Int    // Points requis au lieu de requiredCount
  description    String?
  isDefault      Boolean @default(false)
  order          Int     @default(0)
  shopId         String  // ‚úÖ OBLIGATOIRE pour multi-tenant
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relations
  shop           Shop    @relation(fields: [shopId], references: [id], onDelete: Cascade)
  userBadges     UserBadge[]
  
  @@unique([shopId, name]) // Nom unique par shop
  @@map("badges")
}

// üë• SYST√àME D'ABONNEMENT
model Follow {
  id          String   @id @default(cuid())
  followerId  String   // Utilisateur qui suit
  followingId String   // Utilisateur suivi
  shopId      String   // ‚úÖ OBLIGATOIRE pour multi-tenant
  createdAt   DateTime @default(now())

  // Relations
  shop        Shop @relation(fields: [shopId], references: [id], onDelete: Cascade)
  follower    User @relation("UserFollows", fields: [followerId], references: [id], onDelete: Cascade)
  following   User @relation("UserFollowed", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId]) // Un user ne peut suivre qu'une fois
  @@map("follows")
}

// üèÜ SYST√àME DE POINTS
model UserPoints {
  id        String   @id @default(cuid())
  userId    String
  shopId    String   // ‚úÖ OBLIGATOIRE pour multi-tenant
  points    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  shop      Shop @relation(fields: [shopId], references: [id], onDelete: Cascade)
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  pointsHistory PointTransaction[]

  @@unique([userId, shopId]) // Points uniques par user par shop
  @@map("user_points")
}

model PointTransaction {
  id          String      @id @default(cuid())
  userId      String
  shopId      String      // ‚úÖ OBLIGATOIRE pour multi-tenant
  points      Int         // Positif = gain, n√©gatif = d√©pense
  action      PointAction
  description String?
  createdAt   DateTime    @default(now())

  // Relations
  shop        Shop       @relation(fields: [shopId], references: [id], onDelete: Cascade)
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userPoints  UserPoints @relation(fields: [userPointsId], references: [id], onDelete: Cascade)
  userPointsId String

  @@map("point_transactions")
}

// üèÖ BADGES UTILISATEURS
model UserBadge {
  id        String   @id @default(cuid())
  userId    String
  badgeId   String
  shopId    String   // ‚úÖ OBLIGATOIRE pour multi-tenant
  unlockedAt DateTime @default(now())

  // Relations
  shop      Shop @relation(fields: [shopId], references: [id], onDelete: Cascade)
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge     Badge @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId]) // Un badge par user
  @@map("user_badges")
}

// üìù NOUVEL ENUM POUR LES ACTIONS DE POINTS
enum PointAction {
  POST_CREATED      // +10 points
  COMMENT_CREATED   // +5 points
  REACTION_RECEIVED // +2 points
  BADGE_UNLOCKED    // -points requis
  DAILY_LOGIN       // +1 point
}

// üéØ SYST√àME D'ONBOARDING
model UserOnboarding {
  id              String   @id @default(cuid())
  userId          String
  shopId          String   // ‚úÖ OBLIGATOIRE pour multi-tenant

  // T√¢ches d'onboarding
  hasLikedPost    Boolean  @default(false)
  hasCommentedPost Boolean @default(false)
  hasCreatedPost  Boolean  @default(false)

  // M√©tadonn√©es
  completedAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  shop            Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([userId, shopId], name: "userId_shopId") // Un onboarding par user par shop
  @@map("user_onboarding")
}

